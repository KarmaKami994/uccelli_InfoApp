name: Flutter CI - Android Release

# Dieser Workflow wird ausgelöst, wenn ein neuer Tag gepusht wird, der mit 'v' beginnt (z.B. v1.0.0, v1.2.3)
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Code auschecken
      # Holt den Code aus Ihrem Repository in den Runner.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Java Development Kit (JDK) einrichten
      # Stellt sicher, dass die korrekte Java-Version (hier 17) für den Gradle-Build verwendet wird.
      # Dies ist stabiler als sich auf die Standard-Java-Version des Runners zu verlassen.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Flutter SDK einrichten
      # Lädt die exakte Flutter-Version herunter, die Sie im Projekt verwenden (aus Ihrem Bericht entnommen).
      # Das 'cache: true' optimiert zukünftige Builds, indem es das Flutter SDK zwischenspeichert.
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3' # Gemäss Ihrem Statusbericht
          channel: 'stable'
          cache: true

      # 4. (NEU & WICHTIG) Ausführungsrechte für Gradle Wrapper setzen
      # Dies behebt das Gradle-Versionsproblem, indem sichergestellt wird, dass der Runner
      # den Wrapper verwenden kann (und muss), der die korrekte Version (8.9) herunterlädt.
      - name: Grant execute permission for gradlew
        run: chmod +x android/gradlew

      # 5. (NEU & WICHTIG) Abhängigkeiten installieren und Code generieren
      # Führt alle notwendigen Vorbereitungsschritte in der korrekten Reihenfolge aus.
      - name: Install dependencies and generate files
        run: |
          flutter pub get
          flutter gen-l10n

      # 6. Flutter App bauen (Release APK)
      # Startet den eigentlichen Build-Prozess. Da 'gen-l10n' vorher lief, werden die
      # Lokalisierungsdateien jetzt korrekt gefunden.
      - name: Build Flutter App
        run: flutter build apk --release

      # 7. Release-Artefakt umbenennen und vorbereiten
      # Benennt die APK-Datei um, damit sie die Versionsnummer aus dem Git-Tag enthält.
      # Z.B. wird aus app-release.apk -> uccelli-app-v1.0.1.apk
      - name: Rename release artifact
        run: mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/uccelli-app-${{ github.ref_name }}.apk

      # 8. Release auf GitHub erstellen
      # Erstellt einen neuen Release auf Ihrer GitHub-Seite und lädt die umbenannte APK-Datei dorthin hoch.
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: build/app/outputs/flutter-apk/uccelli-app-${{ github.ref_name }}.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}