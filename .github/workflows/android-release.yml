name: 'ðŸ“¦ Build & Release APK'

on:
  push:
    tags:
      - 'v*'            # anything like v1.2.3
  workflow_dispatch:    # allow manual runs too

permissions:
  contents: write       # needed to create releases & upload assets

env:
  REPO: ${{ github.repository }}    # owner/repo
  TAG:  ${{ github.ref_name }}      # e.g. "v1.2.3"

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    env:
      JKS_BASE64:         ${{ secrets.JKS_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_PASSWORD:      ${{ secrets.KEY_PASSWORD }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter (stable channel)
        uses: subosito/flutter-action@v1
        with:
          channel: stable
          cache: true # Caching fÃ¼r Flutter SDK und pub-cache

      - name: Add Android SDK cmdline-tools to PATH
        run: echo "PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH" >> $GITHUB_ENV

      # Keystore-Pfad
      - name: Decode & install keystore
        run: |
          mkdir -p uccelli_info_app/android/app
          echo "$JKS_BASE64" | base64 --decode > uccelli_info_app/android/app/uccelli-release.jks

      # Android SDK Lizenzen
      - name: Accept Android SDK licenses
        working-directory: uccelli_info_app
        run: |
          yes | sdkmanager --install "platform-tools" "platforms;android-33" "cmdline-tools;latest"
          yes | sdkmanager --licenses

      # Robuste Schritte fÃ¼r AbhÃ¤ngigkeiten und Lokalisierung
      - name: Clean Flutter project
        working-directory: uccelli_info_app
        run: flutter clean

      - name: Clear Flutter pub cache
        working-directory: uccelli_info_app
        run: flutter pub cache clean --force

      - name: Get Flutter dependencies (verbose)
        working-directory: uccelli_info_app
        run: flutter pub get --verbose
      
      - name: Generate localization files (verbose)
        working-directory: uccelli_info_app
        run: flutter gen-l10n --verbose

      # NEU HINZUGEFÃœGT: Gradle Cache leeren und Wrapper neu initialisieren
      - name: Clean Gradle cache and ensure wrapper is executable
        working-directory: uccelli_info_app/android # Wichtig: In das Android-Modul wechseln
        run: |
          # LÃ¶sche den Gradle-Cache
          rm -rf ~/.gradle/caches/
          # Stelle sicher, dass der Gradle Wrapper ausfÃ¼hrbar ist
          chmod +x ./gradlew

      # Build APK
      - name: Build release APK
        working-directory: uccelli_info_app
        run: flutter build apk --release

      # GitHub Release erstellen
      - name: Create GitHub Release via REST API
        id: create_release
        working-directory: uccelli_info_app
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/$REPO/releases \
            -d "{\"tag_name\":\"$TAG\",\"name\":\"Release $TAG\",\"draft\":false,\"prerelease\":false}")
          echo "$response"
          upload_url=$(echo "$response" | jq -r .upload_url | sed -e "s/{.*}//")
          echo "UPLOAD_URL=$upload_url" >> $GITHUB_ENV

      # APK Asset hochladen
      - name: Upload APK asset via REST API
        working-directory: uccelli_info_app
        run: |
          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/vnd.android.package-archive" \
            --data-binary @build/app/outputs/flutter-apk/app-release.apk \
            "${UPLOAD_URL}?name=uccelli-info-app-${TAG}.apk"
